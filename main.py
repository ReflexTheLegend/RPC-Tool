from pypresence import *
import time
import psutil
from colorama import Fore
import colorama
import os

# Some loading animaion lmfao to look better till line 252
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... |')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... /')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... -')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTYELLOW_EX}Loading... \\')
time.sleep(0.1)
os.system('cls')
print(f'{Fore.LIGHTBLUE_EX}Ready!')
time.sleep(2)


os.system('cls')
colorama.init()

print(f'''{Fore.LIGHTWHITE_EX}
 /$$$$$$$  /$$$$$$$   /$$$$$$        /$$$$$$$$                  /$$
| $$__  $$| $$__  $$ /$$__  $$      |__  $$__/                 | $$
| $$  \ $$| $$  \ $$| $$  \__/         | $$  /$$$$$$   /$$$$$$ | $$
| $$$$$$$/| $$$$$$$/| $$               | $$ /$$__  $$ /$$__  $$| $$
| $$__  $$| $$____/ | $$               | $$| $$  \ $$| $$  \ $$| $$
| $$  \ $$| $$      | $$    $$         | $$| $$  | $$| $$  | $$| $$
| $$  | $$| $$      |  $$$$$$/         | $$|  $$$$$$/|  $$$$$$/| $$
|__/  |__/|__/       \______/          |__/ \______/  \______/ |__/                                                                
''') #Sick ASCII logo XD
time.sleep(0.5)
print(f'{Fore.LIGHTBLACK_EX}Made by: {Fore.WHITE}R3FL3X#1337 {Fore.LIGHTBLACK_EX}| Licenced under {Fore.WHITE}MIT License')
time.sleep(1)
client_id = input(f"{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input Application ID: \n>>>{Fore.WHITE} ")
details = input(f"{Fore.LIGHTBLACK_EX}[{Fore.YELLOW}?{Fore.LIGHTBLACK_EX}] Do you want RAM usage as RPC details? (yes/no) \n>>>{Fore.WHITE} ")
if(details=='yes'):
    details = round(psutil.virtual_memory().percent,1)
    details1 = "RAM: "+str(details)+"%"
elif(details=='no'):
    details1 = input(f"{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Input details part text: \n>>>{Fore.WHITE} ")
else:
    print(f"{Fore.LIGHTBLACK_EX}[{Fore.RED}X{Fore.LIGHTBLACK_EX}] Please choose between yes and no!")
state = input(f"{Fore.LIGHTBLACK_EX}[{Fore.YELLOW}?{Fore.LIGHTBLACK_EX}] Do you want CPU usage as RPC state? (yes/no) \n>>>{Fore.WHITE} ")
if(state=="yes"):
    state = round(psutil.cpu_percent(),1)
    state1= "CPU: "+str(state)+"%"
elif(state=="no"):
    state1 = input(f"{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Input state part text: \n>>>{Fore.WHITE} ")
else:
    print(f"{Fore.LIGHTBLACK_EX}[{Fore.RED}X{Fore.LIGHTBLACK_EX}] Please choose between yes and no!")
l_image = input(f"{Fore.LIGHTBLACK_EX}[{Fore.YELLOW}?{Fore.LIGHTBLACK_EX}] Do you want Large Image on your RPC? (yes/no) \n>>>{Fore.WHITE} ")
if(l_image=='yes'):
    l_image = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input the name of the large image name from developer portal application: \n>>>{Fore.WHITE} ')
elif(l_image=='no'):
    l_image = ''
else:
    print(f"{Fore.LIGHTBLACK_EX}[{Fore.RED}X{Fore.LIGHTBLACK_EX}] Please choose between yes and no!")
s_image = input(f'{Fore.LIGHTBLACK_EX}[{Fore.YELLOW}?{Fore.LIGHTBLACK_EX}] Do you want Small Image on your RPC? (yes/no) \n>>>{Fore.WHITE} ')
if(s_image=='yes'):
    s_image = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input the name of the small image name from developer portal application: \n>>>{Fore.WHITE} ')
elif(s_image=='no'):
    s_image = ''
else:
    print(f"{Fore.LIGHTBLACK_EX}[{Fore.RED}X{Fore.LIGHTBLACK_EX}] Please choose between yes and no!")
l_text = input(f'{Fore.LIGHTBLACK_EX}[{Fore.YELLOW}?{Fore.LIGHTBLACK_EX}] Do you want Large Text on your RPC? (yes/no) \n>>>{Fore.WHITE} ')
if(l_text=='yes'):
    l_text = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input the name of the large text name from developer portal application: \n>>>{Fore.WHITE} ')
elif(l_text=='no'):
    l_text = ''
else:
    print(f"{Fore.LIGHTBLACK_EX}[{Fore.RED}X{Fore.LIGHTBLACK_EX}] Please choose between yes and no!")
s_text = input(f'{Fore.LIGHTBLACK_EX}[{Fore.YELLOW}?{Fore.LIGHTBLACK_EX}] Do you want Small Text on your RPC? (yes/no) \n>>>{Fore.WHITE} ')
if(s_text=='yes'):
    s_text = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input the name of the small text name from developer portal application: \n>>>{Fore.WHITE} ')
elif(s_text=='no'):
    s_text = ''
else:
    print(f"{Fore.LIGHTBLACK_EX}[{Fore.RED}X{Fore.LIGHTBLACK_EX}] Please choose between yes and no!")
buts = input(f"{Fore.LIGHTBLACK_EX}[{Fore.YELLOW}?{Fore.LIGHTBLACK_EX}] Do you want buttons in your RPC? (yes/no) \n>>>{Fore.WHITE} ")
if(buts=='no'):
    buttons=''
    label1=''
    url1=''
    label2=''
    url2=''
elif(buts=='yes'):
    buts2 = int(input(f'{Fore.LIGHTBLACK_EX}[{Fore.YELLOW}?{Fore.LIGHTBLACK_EX}] 1 or 2 buttons?\n>>>{Fore.WHITE} '))
    if(buts2==1):
        label1 = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input Button`s label: \n>>>{Fore.WHITE} ')
        url1 = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input Button`s URL link: \n>>>{Fore.WHITE} ')
    elif(buts2==2):
        label1 = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input 1st button`s label: \n>>>{Fore.WHITE} ')
        url1 = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input 1st button`s URL link: \n>>>{Fore.WHITE} ')
        label2 = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input 2nd button`s label: \n>>>{Fore.WHITE} ')
        url2 = input(f'{Fore.LIGHTBLACK_EX}[{Fore.GREEN}+{Fore.LIGHTBLACK_EX}] Please input 2nd button`s URL link: \n>>>{Fore.WHITE} ')
    else:
        print(f'{Fore.LIGHTBLACK_EX}[{Fore.RED}X{Fore.LIGHTBLACK_EX}] Please select only between 1 and 2!')
else:
    print(f"{Fore.LIGHTBLACK_EX}[{Fore.RED}X{Fore.LIGHTBLACK_EX}] Please select between yes or no only!")
  #Finished requesting RPC components (oof)

print(f'{Fore.BLUE}RPC is running!')

RPC = Presence(client_id,pipe=0)  # Initialize the client class
RPC.connect() # Start the handshake loop

def rpc():
    start_time = time.time()

    while True:
        RPC.update(start=start_time, details=details1, state=state1, large_image=l_image, small_image=s_image, large_text=l_text, small_text=s_text, buttons=[{"label": label1, "url": url1}, {"label": label2, "url": url2},])  # Set the presence
        time.sleep(1)
rpc() #Start the RPC
